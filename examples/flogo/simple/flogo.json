{
  "name": "simplerules",
  "type": "flogo:app",
  "version": "0.0.1",
  "description": "Sample Flogo App",
  "appModel": "1.0.0",
  "properties": [
    {
      "name": "name",
      "type": "string",
      "value": "testprop"
    }
  ],
  "triggers": [
    {
      "id": "receive_http_message",
      "ref": "github.com/project-flogo/contrib/trigger/rest",
      "settings": {
        "port": "7777"
      },
      "handlers": [
        {
          "settings": {
            "method": "GET",
            "path": "/test/:tupleType"
          },
          "actions": [
            {
              "id": "simple_rule",
              "input": {
                "tupletype": "=$.pathParams.tupleType",
                "values": "=$.queryParams"
              }
            }
          ]
        }
      ]
    }
  ],
  "actions": [
    {
      "ref": "github.com/project-flogo/rules/ruleaction",
      "settings": {
        "ruleSessionURI": "res://rulesession:simple",
        "tds": [
          {
            "name": "n1",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "pk-index": 0
              }
            ]
          },
          {
            "name": "n2",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "pk-index": 0
              }
            ]
          }
        ]
      },
      "id": "simple_rule"
    }
  ],
  "resources": [
    {
      "id": "rulesession:simple",
      "data": {
        "metadata": {
          "input": [
            {
              "name": "values",
              "type": "string"
            },
            {
              "name": "tupletype",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "outputData",
              "type": "any"
            }
          ]
        },
        "rules": [
          {
            "name": "n1.name == Bob",
            "conditions": [
              {
                "expression" : "$.n1.name == 'Bob'"
              }
            ],
            "actionService": {
              "service": "FunctionService"
            }
          },
          {
            "name": "n1.name == Bob \u0026\u0026 n1.name == n2.name",
            "conditions": [
              {
                "identifiers": [
                  "n1"
                ],
                "evaluator": "checkForBob"
              },
              {
                "expression" : "($.n1.name == 'Bob') \u0026\u0026 ($.n1.name == $.n2.name)"
              }
            ],
            "actionService": {
              "service": "FunctionService1"
            }
          },
          {
            "name": "env variable example",
            "conditions": [
              {
                "expression" : "($.n1.name == $env['name'])"
              }
            ],
            "actionService": {
              "service": "FunctionService2"
            }
          },
          {
            "name": "flogo property example",
            "identifiers": [
              "n1"
            ],
            "conditions": [
              {
                "expression" : "('testprop' == $property['name'])"
              }
            ],
            "actionService": {
              "service": "FunctionService3"
            }
          }
        ],
        "services": [
          {
            "name": "FunctionService",
            "description": "function service for checkForBobAction",
            "type": "function",
            "function": "checkForBobAction"
          },
          {
            "name": "FunctionService1",
            "description": "function service for checkSameNamesAction",
            "type": "function",
            "function": "checkSameNamesAction"
          },
          {
            "name": "FunctionService2",
            "description": "function service for envVarExampleAction",
            "type": "function",
            "function": "envVarExampleAction"
          },
          {
            "name": "FunctionService3",
            "description": "function service for propertyExampleAction",
            "type": "function",
            "function": "propertyExampleAction"
          }
        ]
      }
    }
  ]
}