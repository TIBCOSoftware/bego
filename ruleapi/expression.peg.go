package ruleapi

// Code generated by peg expression.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	rulevalue
	rulenot
	ruleand
	ruleor
	ruleeq
	ruleneq
	rulegt
	rulegte
	rulelt
	rulelte
	ruleopen
	ruleclose
	rulesp
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	rulePegText
	ruleAction10
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"value",
	"not",
	"and",
	"or",
	"eq",
	"neq",
	"gt",
	"gte",
	"lt",
	"lte",
	"open",
	"close",
	"sp",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"PegText",
	"Action10",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Expr struct {
	Expression

	Buffer string
	buffer []rune
	rules  [32]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Expr) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Expr) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Expr
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Expr) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Expr) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Expr) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeOr)
		case ruleAction1:
			p.AddOperator(TypeAnd)
		case ruleAction2:
			p.AddOperator(TypeNot)
		case ruleAction3:
			p.AddOperator(TypeEq)
		case ruleAction4:
			p.AddOperator(TypeNEq)
		case ruleAction5:
			p.AddOperator(TypeGte)
		case ruleAction6:
			p.AddOperator(TypeGt)
		case ruleAction7:
			p.AddOperator(TypeLte)
		case ruleAction8:
			p.AddOperator(TypeLt)
		case ruleAction9:
			p.AddOperator(TypeEq)
		case ruleAction10:
			p.AddLiteral(buffer[begin:end])

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Expr) error {
	return func(p *Expr) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Expr) error {
	return func(p *Expr) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Expr) Init(options ...func(*Expr) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp e1 !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				if !_rules[rulee1]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 (or e2 Action0)*)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[rulee2]() {
					goto l3
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleor]() {
						goto l6
					}
					if !_rules[rulee2]() {
						goto l6
					}
					if !_rules[ruleAction0]() {
						goto l6
					}
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(rulee1, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 e2 <- <(e3 (and e3 Action1)*)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				if !_rules[rulee3]() {
					goto l7
				}
			l9:
				{
					position10, tokenIndex10 := position, tokenIndex
					if !_rules[ruleand]() {
						goto l10
					}
					if !_rules[rulee3]() {
						goto l10
					}
					if !_rules[ruleAction1]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position10, tokenIndex10
				}
				add(rulee2, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 3 e3 <- <((not e4 Action2) / e4)> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[rulenot]() {
						goto l14
					}
					if !_rules[rulee4]() {
						goto l14
					}
					if !_rules[ruleAction2]() {
						goto l14
					}
					goto l13
				l14:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[rulee4]() {
						goto l11
					}
				}
			l13:
				add(rulee3, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 4 e4 <- <((eq e5 Action3) / (neq e5 Action4) / (gte e5 Action5) / (gt e5 Action6) / (lte e5 Action7) / (lt e5 Action8) / (open e1 close) / (e5 Action9))> */
		func() bool {
			position15, tokenIndex15 := position, tokenIndex
			{
				position16 := position
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[ruleeq]() {
						goto l18
					}
					if !_rules[rulee5]() {
						goto l18
					}
					if !_rules[ruleAction3]() {
						goto l18
					}
					goto l17
				l18:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[ruleneq]() {
						goto l19
					}
					if !_rules[rulee5]() {
						goto l19
					}
					if !_rules[ruleAction4]() {
						goto l19
					}
					goto l17
				l19:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[rulegte]() {
						goto l20
					}
					if !_rules[rulee5]() {
						goto l20
					}
					if !_rules[ruleAction5]() {
						goto l20
					}
					goto l17
				l20:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[rulegt]() {
						goto l21
					}
					if !_rules[rulee5]() {
						goto l21
					}
					if !_rules[ruleAction6]() {
						goto l21
					}
					goto l17
				l21:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[rulelte]() {
						goto l22
					}
					if !_rules[rulee5]() {
						goto l22
					}
					if !_rules[ruleAction7]() {
						goto l22
					}
					goto l17
				l22:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[rulelt]() {
						goto l23
					}
					if !_rules[rulee5]() {
						goto l23
					}
					if !_rules[ruleAction8]() {
						goto l23
					}
					goto l17
				l23:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[ruleopen]() {
						goto l24
					}
					if !_rules[rulee1]() {
						goto l24
					}
					if !_rules[ruleclose]() {
						goto l24
					}
					goto l17
				l24:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[rulee5]() {
						goto l15
					}
					if !_rules[ruleAction9]() {
						goto l15
					}
				}
			l17:
				add(rulee4, position16)
			}
			return true
		l15:
			position, tokenIndex = position15, tokenIndex15
			return false
		},
		/* 5 e5 <- <(<value> sp Action10)> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					position27 := position
					if !_rules[rulevalue]() {
						goto l25
					}
					add(rulePegText, position27)
				}
				if !_rules[rulesp]() {
					goto l25
				}
				if !_rules[ruleAction10]() {
					goto l25
				}
				add(rulee5, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 6 value <- <(([0-9]+ '.' [0-9]*) / ('.' [0-9]+) / ('"' (!'"' .)* '"') / ('\'' (!'\'' .)* '\'') / ([a-z] / [A-Z] / '_' / [0-9])+)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				{
					position30, tokenIndex30 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l31
					}
					position++
				l32:
					{
						position33, tokenIndex33 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position33, tokenIndex33
					}
					if buffer[position] != rune('.') {
						goto l31
					}
					position++
				l34:
					{
						position35, tokenIndex35 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position35, tokenIndex35
					}
					goto l30
				l31:
					position, tokenIndex = position30, tokenIndex30
					if buffer[position] != rune('.') {
						goto l36
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l36
					}
					position++
				l37:
					{
						position38, tokenIndex38 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l38
						}
						position++
						goto l37
					l38:
						position, tokenIndex = position38, tokenIndex38
					}
					goto l30
				l36:
					position, tokenIndex = position30, tokenIndex30
					if buffer[position] != rune('"') {
						goto l39
					}
					position++
				l40:
					{
						position41, tokenIndex41 := position, tokenIndex
						{
							position42, tokenIndex42 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l42
							}
							position++
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
						if !matchDot() {
							goto l41
						}
						goto l40
					l41:
						position, tokenIndex = position41, tokenIndex41
					}
					if buffer[position] != rune('"') {
						goto l39
					}
					position++
					goto l30
				l39:
					position, tokenIndex = position30, tokenIndex30
					if buffer[position] != rune('\'') {
						goto l43
					}
					position++
				l44:
					{
						position45, tokenIndex45 := position, tokenIndex
						{
							position46, tokenIndex46 := position, tokenIndex
							if buffer[position] != rune('\'') {
								goto l46
							}
							position++
							goto l45
						l46:
							position, tokenIndex = position46, tokenIndex46
						}
						if !matchDot() {
							goto l45
						}
						goto l44
					l45:
						position, tokenIndex = position45, tokenIndex45
					}
					if buffer[position] != rune('\'') {
						goto l43
					}
					position++
					goto l30
				l43:
					position, tokenIndex = position30, tokenIndex30
					{
						position49, tokenIndex49 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l50
						}
						position++
						goto l49
					l50:
						position, tokenIndex = position49, tokenIndex49
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l51
						}
						position++
						goto l49
					l51:
						position, tokenIndex = position49, tokenIndex49
						if buffer[position] != rune('_') {
							goto l52
						}
						position++
						goto l49
					l52:
						position, tokenIndex = position49, tokenIndex49
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l28
						}
						position++
					}
				l49:
				l47:
					{
						position48, tokenIndex48 := position, tokenIndex
						{
							position53, tokenIndex53 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l54
							}
							position++
							goto l53
						l54:
							position, tokenIndex = position53, tokenIndex53
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l55
							}
							position++
							goto l53
						l55:
							position, tokenIndex = position53, tokenIndex53
							if buffer[position] != rune('_') {
								goto l56
							}
							position++
							goto l53
						l56:
							position, tokenIndex = position53, tokenIndex53
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l48
							}
							position++
						}
					l53:
						goto l47
					l48:
						position, tokenIndex = position48, tokenIndex48
					}
				}
			l30:
				add(rulevalue, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 7 not <- <('!' sp)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if buffer[position] != rune('!') {
					goto l57
				}
				position++
				if !_rules[rulesp]() {
					goto l57
				}
				add(rulenot, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 8 and <- <('&' '&' sp)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if buffer[position] != rune('&') {
					goto l59
				}
				position++
				if buffer[position] != rune('&') {
					goto l59
				}
				position++
				if !_rules[rulesp]() {
					goto l59
				}
				add(ruleand, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 9 or <- <('|' '|' sp)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if buffer[position] != rune('|') {
					goto l61
				}
				position++
				if buffer[position] != rune('|') {
					goto l61
				}
				position++
				if !_rules[rulesp]() {
					goto l61
				}
				add(ruleor, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 10 eq <- <('=' '=' sp)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				if !_rules[rulesp]() {
					goto l63
				}
				add(ruleeq, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 neq <- <('!' '=' sp)> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if buffer[position] != rune('!') {
					goto l65
				}
				position++
				if buffer[position] != rune('=') {
					goto l65
				}
				position++
				if !_rules[rulesp]() {
					goto l65
				}
				add(ruleneq, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 12 gt <- <('>' sp)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if buffer[position] != rune('>') {
					goto l67
				}
				position++
				if !_rules[rulesp]() {
					goto l67
				}
				add(rulegt, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 13 gte <- <('>' '=' sp)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if buffer[position] != rune('>') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if !_rules[rulesp]() {
					goto l69
				}
				add(rulegte, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 14 lt <- <('<' sp)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if buffer[position] != rune('<') {
					goto l71
				}
				position++
				if !_rules[rulesp]() {
					goto l71
				}
				add(rulelt, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 15 lte <- <('<' '=' sp)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if buffer[position] != rune('<') {
					goto l73
				}
				position++
				if buffer[position] != rune('=') {
					goto l73
				}
				position++
				if !_rules[rulesp]() {
					goto l73
				}
				add(rulelte, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 16 open <- <('(' sp)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if buffer[position] != rune('(') {
					goto l75
				}
				position++
				if !_rules[rulesp]() {
					goto l75
				}
				add(ruleopen, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 17 close <- <(')' sp)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune(')') {
					goto l77
				}
				position++
				if !_rules[rulesp]() {
					goto l77
				}
				add(ruleclose, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 18 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position80 := position
			l81:
				{
					position82, tokenIndex82 := position, tokenIndex
					{
						position83, tokenIndex83 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l84
						}
						position++
						goto l83
					l84:
						position, tokenIndex = position83, tokenIndex83
						if buffer[position] != rune('\t') {
							goto l82
						}
						position++
					}
				l83:
					goto l81
				l82:
					position, tokenIndex = position82, tokenIndex82
				}
				add(rulesp, position80)
			}
			return true
		},
		/* 20 Action0 <- <{ p.AddOperator(TypeOr) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 21 Action1 <- <{ p.AddOperator(TypeAnd) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 22 Action2 <- <{ p.AddOperator(TypeNot) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 23 Action3 <- <{ p.AddOperator(TypeEq) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 24 Action4 <- <{ p.AddOperator(TypeNEq) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 25 Action5 <- <{ p.AddOperator(TypeGte) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 26 Action6 <- <{ p.AddOperator(TypeGt) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 27 Action7 <- <{ p.AddOperator(TypeLte) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 28 Action8 <- <{ p.AddOperator(TypeLt) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 29 Action9 <- <{ p.AddOperator(TypeEq) }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		nil,
		/* 31 Action10 <- <{ p.AddLiteral(buffer[begin:end]) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
